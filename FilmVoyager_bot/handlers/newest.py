from aiogram import Router, types
from aiogram.types import CallbackQuery
from keyboards.newest_keyboard import build_newest_keyboard, fetch_newest_movies
from keyboards.main_menu import get_back_button
router = Router()

user_state = {}

@router.message(lambda message: message.text == "üÜï –ù–æ–≤–∏–Ω–∫–∏")
async def show_newest_movies_handler(message: types.Message):
    print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤–∏–Ω–∫–∏")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    user_id = message.from_user.id
    user_state[user_id] = {"offset": 0}

    movies = fetch_newest_movies(limit=20, offset=0)
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(movies) if movies else 0}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

    if not movies:
        await message.answer("–ù–æ–≤–∏–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    text = "<b>üÜï –°–≤–µ–∂–∏–µ –Ω–æ–≤–∏–Ω–∫–∏ –∫–∏–Ω–æ–ø—Ä–æ–∫–∞—Ç–∞</b>\n\n"
    for i, movie in enumerate(movies, start=1):
        title, year, rating = movie
        rating_str = f"‚≠ê{rating:.1f}" if rating else "‚≠ê–Ω–µ—Ç"
        text += f"{i}. <b>{title}</b>\n   –ì–æ–¥: {year}, –†–µ–π—Ç–∏–Ω–≥: {rating_str}\n\n"

    markup = build_newest_keyboard(offset=0)
    await message.answer(text, reply_markup=markup, parse_mode="HTML")

@router.callback_query(lambda call: call.data.startswith("newest_"))
async def next_newest_page(call: CallbackQuery):
    user_id = call.from_user.id
    offset = int(call.data.split("_")[1])
    user_state[user_id] = {"offset": offset}

    movies = fetch_newest_movies(limit=20, offset=offset)

    if not movies:
        await call.answer("–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤")
        return

    text = f"<b>üé¨ –°–≤–µ–∂–∏–µ –Ω–æ–≤–∏–Ω–∫–∏ (—Å {offset + 1} –ø–æ {offset + len(movies)})</b>\n\n"
    for i, movie in enumerate(movies, start=1):
        title, year, rating = movie
        rating_str = f"‚≠ê{rating:.1f}" if rating else "‚≠ê–Ω–µ—Ç"
        text += f"{i + offset}. <b>{title}</b>\n   –ì–æ–¥: {year}, –†–µ–π—Ç–∏–Ω–≥: {rating_str}\n\n"

    markup = build_newest_keyboard(offset=offset)
    await call.message.edit_text(text, reply_markup=markup, parse_mode="HTML",)
    await call.answer()