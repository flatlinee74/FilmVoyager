# handlers/search_title.py
import sqlite3
from aiogram import Router, types
from aiogram.types import CallbackQuery
from database.db import get_movies_connection
from database.favorites_db import get_favorites_connection
from database.queries import (
    SEARCH_MOVIE_BY_TITLE,
    GET_GENRES_FOR_MOVIE,
    GET_DIRECTORS_FOR_MOVIE,
    GET_WRITERS_FOR_MOVIE
)
from keyboards.movie_search_keyboard import build_movie_search_results
from keyboards.favorite_keyboard import build_add_button, build_remove_button

router = Router()

user_state = {}  # {user_id: {'results': [...]}}


@router.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
async def ask_for_title(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞:")


@router.message()
async def search_by_title(message: types.Message):
    query = message.text.strip()
    user_id = message.from_user.id

    with get_movies_connection() as conn:
        cur = conn.cursor()
        print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ '{query}'")

        try:
            cur.execute(SEARCH_MOVIE_BY_TITLE(query))
            results = cur.fetchall()
        except sqlite3.OperationalError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ SQL: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return

    if not results:
        await message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    user_state[user_id] = {"results": results}
    markup = build_movie_search_results(results)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º:", reply_markup=markup)


@router.callback_query(lambda call: call.data.startswith("movie_details_"))
async def show_full_movie_details(call: CallbackQuery):
    movie_id = call.data.split("_")[2]
    user_id = call.from_user.id

    result = next((r for r in user_state.get(user_id, {}).get("results", []) if r[0] == movie_id), None)

    if not result:
        await call.answer("–û—à–∏–±–∫–∞: —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    tconst, title, title_type, year_start, year_end, rating, votes, runtime = result
    year = f"{year_start}" + (f"‚Äì{year_end}" if year_end else "")

    with get_movies_connection() as conn:
        cur = conn.cursor()

        # –ñ–∞–Ω—Ä—ã
        cur.execute(GET_GENRES_FOR_MOVIE, (tconst,))
        genres = [g[0] for g in cur.fetchall()]

        # –†–µ–∂–∏—Å—Å—ë—Ä—ã
        cur.execute(GET_DIRECTORS_FOR_MOVIE, (tconst,))
        directors = [d[0] for d in cur.fetchall()]

        # –°—Ü–µ–Ω–∞—Ä–∏—Å—Ç—ã
        cur.execute(GET_WRITERS_FOR_MOVIE, (tconst,))
        writers = [w[0] for w in cur.fetchall()]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    is_favorite = False
    with get_favorites_connection() as fav_conn:
        fav_cur = fav_conn.cursor()
        fav_cur.execute("SELECT 1 FROM favorites WHERE user_id = ? AND movie_id = ?", (user_id, tconst))
        is_favorite = bool(fav_cur.fetchone())

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    type_mapping = {
        'movie': 'üé¨',
        'tvShow': 'üì∫',
        'tvSeries': 'üì∫',
        'tvMiniSeries': 'üéû'
    }

    icon = type_mapping.get(title_type, 'üé¨')

    text = f"<b>{icon} –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</b>\n\n"
    text += f"üé• –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n"
    text += f"üìÖ –ì–æ–¥: {year}\n"
    text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating or '–Ω–µ—Ç'} ({votes or '–Ω–µ—Ç'})\n"

    if runtime:
        text += f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {runtime} –º–∏–Ω.\n"

    if genres:
        text += f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(genres)}\n"

    if directors:
        text += f"üé• –†–µ–∂–∏—Å—Å—ë—Ä—ã: {', '.join(directors[:5])}\n"

    if writers:
        text += f"‚úçÔ∏è –°—Ü–µ–Ω–∞—Ä–∏—Å—Ç—ã: {', '.join(writers[:5])}\n"

    # –ö–Ω–æ–ø–∫–∞ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
    if is_favorite:
        markup = build_remove_button(tconst)
    else:
        markup = build_add_button(tconst)

    await call.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
    await call.answer("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")